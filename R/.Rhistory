## You only need to do this once
install.packages("tidyverse")
## Call this in whenever you want to use associated packages such as ggplot2, tidyr, etc.
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
## load the IBEX data
dati <- read.csv('expsemprag-ibextutorial-results-cleaned.csv')
## Call this in whenever you want to use associated packages such as ggplot2, tidyr, etc.
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
head(iris)
iris$Species
summary(iris$Species)
## load the vowel data
datv <- read.csv('asmt1-korean-vowels.csv')
View(datv)
head(datv)
summary(datv)
View(datv)
## load the unprocessed qualtrics data
dats <- read.csv('qualtrics-processed-sample.csv')
View(dats)
View(dats)
dats_tidy <-
dats %>% gather(trialtype, naturalness, -subj_gender, -subj_age, -subj_comm)
View(dats_tidy)
View(dats)
View(dats)
mean(iris$Petal.Length)
iris$Petal.Length %>%
unique %>%
mean %>%
round(digits = 2)
## load the IBEX data which have not been cleaned yet
dati2 <- read.csv('expsemprag-ibextutorial-results.csv')
View(dati2)
summary(dati2)
dati2[dati2==""] <- NA
View(dati2)
View(dati2)
dati2c %>%
filter(is.na == 0)
dati2c <-
dati2 %>%
filter(is.na == 0)
dati2c <-
dati2 %>%
filter(is.na(response) == 0)
View(dati2c)
#Alternatively:
dati2c <-
dati2 %>%
filter(response != "NA")
View(dati2c)
View(dati2)
dati <-
dati2 %>%
filter(response != "NA")
View(dati)
dati %>%
select(-stimuli)
View(dati)
View(dati)
dati <-
dati %>%
mutate(response = replace(response, str_detect(response, "All"), "wide")) %>%
mutate(response = replace(response, str_detect(response, "Each"), "narrow"))
View(dati)
dati <-
dati2 %>%
filter(response != "NA")
View(dati)
dati$response <- as.character(dati$response)
dati <-
dati %>%
mutate(response = replace(response, str_detect(response, "All"), "wide")) %>%
mutate(response = replace(response, str_detect(response, "Each"), "narrow"))
dati$response <- as.factor(dati$response)
View(dati)
View(dati)
install.packages(c("ggthemes", "wesanderson"))
## The data
dat <- read.csv('veridicality-pilot-data-191127.csv')
head(dat)
View(dat)
summary(dat$complementizer)
dat_t <-
dat %>%
filter(complementizer != "ctr",
complementizer != "geo1",
complementizer != "geo2",
prosody != "p3")
# Order verbs in intuitive pairs
dat_t$verbtype <- factor(dat_t$verbtype, levels= c("al","moreu", "gieok", "ggameok", "mit", "alanae"))
# Rename the prosody conditions in more intuitive ways
dat_t$prosody <- as.character(dat_t$prosody)
dat_t$prosody[dat_t$prosody == "p1"] <- "ES"
dat_t$prosody[dat_t$prosody == "p2"] <- "EV"
dat_t$prosody[dat_t$prosody == "p4"] <- "MV"
dat_t$prosody <- as.factor(dat_t$prosody)
dat_s1 <- dat_t %>%
group_by(verbtype, prosody) %>%
summarise(meanVer = mean(veridicality))
dat_s1
dat_s2 <- dat_t %>%
group_by(complementizer) %>%
summarise(meanNat = mean(naturalness))
dat_s2
dat_s1 <- dat_t %>%
group_by(verbtype) %>%
summarise(meanVer = mean(veridicality))
dat_s1
dat_s2 <- dat_t %>%
group_by(verbtype, prosody) %>%
summarise(meanVer = mean(veridicality))
dat_s2
dat_s3 <- dat_t %>%
group_by(verbtype, prosody, complementizer) %>%
summarise(meanVer = mean(veridicality))
dat_s3
dat$subjectID <- as.factor(dat$subjectID)
# Rename the complementizer variables that Excel messed up
dat$complementizer <- as.character(dat$complementizer)
dat$complementizer[dat$complementizer == "2-Jul"] <- "jul2"
dat$complementizer[dat$complementizer == "1-Jul"] <- "jul1"
dat$complementizer <- as.factor(dat$complementizer)
dat_t <-
dat %>%
filter(complementizer != "ctr",
complementizer != "geo1",
complementizer != "geo2",
prosody != "p3")
# Order verbs in intuitive pairs
dat_t$verbtype <- factor(dat_t$verbtype, levels= c("al","moreu", "gieok", "ggameok", "mit", "alanae"))
# Rename the prosody conditions in more intuitive ways
dat_t$prosody <- as.character(dat_t$prosody)
dat_t$prosody[dat_t$prosody == "p1"] <- "ES"
dat_t$prosody[dat_t$prosody == "p2"] <- "EV"
dat_t$prosody[dat_t$prosody == "p4"] <- "MV"
dat_t$prosody <- as.factor(dat_t$prosody)
dat_s1 <- dat_t %>%
group_by(verbtype) %>%
summarise(meanVer = mean(veridicality))
dat_s1
dat_s3 <- dat_t %>%
group_by(verbtype, prosody, complementizer) %>%
summarise(meanVer = mean(veridicality))
dat_s3
View(dat_t)
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_point()
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_bar()
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_boxplot()
?geom_boxplot
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_boxplot() +
facet_grid(. ~ complementizer)
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality)) +
geom_boxplot() +
facet_grid(prosody ~ complementizer)
dat_s3 <- dat_t %>%
group_by(verbtype, prosody, complementizer) %>%
summarise(meanVer = mean(veridicality))
dat_s3
dat_s3 %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity")
facet_grid(complementizer ~ verbtype)
dat_s3
dat_s3 %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
facet_grid(complementizer ~ verbtype)
dat_s <- dat_t %>%
group_by(verbtype, complementizer, prosody) %>%
summarise(meanNat = mean(naturalness),
meanVer = mean(veridicality),
n = n(),
# Standard deviations
sdNat = sd(naturalness),
sdVer = sd(veridicality),
# Standard errors
seNat = sdNat/sqrt(n),
seVer = sdVer/sqrt(n))
dat_s
dat_t$complementizer2 <- dat_t$complementizer
dat_t$complementizer2 <- as.character(dat_t$complementizer2)
dat_t$complementizer2[dat_t$complementizer2 == "jul1"] <- "jul"
dat_t$complementizer2[dat_t$complementizer2 == "jul2"] <- "jul"
dat_t$complementizer2 <- as.factor(dat_t$complementizer2)
# Re-do the summary
dat_s <- dat_t %>%
group_by(verbtype, complementizer2, prosody) %>%
summarise(meanNat = mean(naturalness),
meanVer = mean(veridicality),
n = n(),
sdNat = sd(naturalness),
sdVer = sd(veridicality),
seNat = sdNat/sqrt(n),
seVer = sdVer/sqrt(n))
dat_s
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype)
p
# Order complementizers in intuitive pairs
dat_t$complementizer2 <- factor(dat_t$complementizer2, levels= c("jul","go"))
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype)
p
dat_s <- dat_t %>%
group_by(verbtype, complementizer2, prosody) %>%
summarise(meanNat = mean(naturalness),
meanVer = mean(veridicality),
n = n(),
sdNat = sd(naturalness),
sdVer = sd(veridicality),
seNat = sdNat/sqrt(n),
seVer = sdVer/sqrt(n))
dat_s
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype)
p
dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
ggthemes::theme_few() +
ggthemes::scale_color_solarized()
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
ggthemes::theme_few() +
ggthemes::scale_color_solarized()
p
# Wes Anderson
# install.packages("wesanderson")
library(wesanderson)
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
ggthemes::theme_few() +
scale_fill_manual(values = wes_palette("Royal1"))
p
?`wesanderson-package`
?wesanderson
?wes_palettes
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
ggthemes::theme_few() +
scale_fill_manual(values = wes_palette("GrandBudapest2"))
p
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
theme_bw() +
theme(axis.title.y=element_text(size=14),
axis.title.x=element_blank()) + labs(y='Mean Veridicality Ratings') +
scale_fill_manual(values = c("#D55E00", "#009E73", "#56B4E9")) +
theme(legend.position="none") +
theme(strip.text.x = element_text(size = 10), strip.text.y = element_text(size = 10)) +
geom_hline(yintercept=true_base, linetype="dashed",
color = "#F0E442", size=1.2) +
geom_hline(yintercept=false_base, linetype="dashed",
color = "#999999", size=1.2)
true_base <- 5.74
false_base <- 2.5
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
theme_bw() +
theme(axis.title.y=element_text(size=14),
axis.title.x=element_blank()) + labs(y='Mean Veridicality Ratings') +
scale_fill_manual(values = c("#D55E00", "#009E73", "#56B4E9")) +
theme(legend.position="none") +
theme(strip.text.x = element_text(size = 10), strip.text.y = element_text(size = 10)) +
geom_hline(yintercept=true_base, linetype="dashed",
color = "#F0E442", size=1.2) +
geom_hline(yintercept=false_base, linetype="dashed",
color = "#999999", size=1.2)
p
## You only need to do this once
#install.packages("tidyverse")
## Call this in whenever you want to use associated packages such as ggplot2, tidyr, etc.
library(tidyverse)
## knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
## load the IBEX data which have not been cleaned yet
dati2 <- read.csv('expsemprag-ibextutorial-results.csv')
View(dati)
dati2[dati2==""] <- NA
dati <-
dati2 %>%
filter(response != "NA")
View(dati)
## The data
dat <- read.csv('veridicality-pilot-data-191127.csv')
View(dat)
head(dat)
## Inspect
summary(dat$complementizer)
summary(dat$prosody)
summary(dat$item)
head(dat)
summary(dat$subjectID)
# Treat participant IDs as factors
dat$subjectID <- as.factor(dat$subjectID)
summary(dat$subjectID)
dat$subjectID %>% unique %>% length
dat$complementizer <- as.character(dat$complementizer)
dat$complementizer <- as.character(dat$complementizer)
dat$complementizer[dat$complementizer == "2-Jul"] <- "jul2"
dat$complementizer[dat$complementizer == "1-Jul"] <- "jul1"
dat$complementizer <- as.factor(dat$complementizer)
summary(dat$complementizer)
dat_t <-
dat %>%
filter(complementizer != "ctr",
complementizer != "geo1",
complementizer != "geo2",
prosody != "p3")
summary(dat_t$verbtype)
# Order verbs in intuitive pairs
dat_t$verbtype <- factor(dat_t$verbtype, levels= c("al","moreu", "gieok", "ggameok", "mit", "alanae"))
summary(dat_t$verbtype)
dat_t$prosody <- as.character(dat_t$prosody)
dat_t$prosody[dat_t$prosody == "p1"] <- "ES"
dat_t$prosody[dat_t$prosody == "p2"] <- "EV"
dat_t$prosody[dat_t$prosody == "p4"] <- "MV"
dat_t$prosody <- as.factor(dat_t$prosody)
summary(dat_t$prosody)
dat_s1 <-
dat_t %>%
group_by(verbtype) %>%
summarise(meanVer = mean(veridicality))
dat_s1
dat_s1 <-
dat_t %>%
group_by(verbtype) %>%
summarise(meanVer = mean(veridicality))
dat_s1
dat_s2 <- dat_t %>%
group_by(verbtype, prosody) %>%
summarise(meanVer = mean(veridicality))
dat_s2
dat_s3 <- dat_t %>%
group_by(verbtype, prosody, complementizer) %>%
summarise(meanVer = mean(veridicality))
dat_s3
?geom_boxplot
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_boxplot()
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_boxplot() +
facet_grid(. ~ complementizer)
dat_t %>%
ggplot(aes(x = verbtype, y = veridicality)) +
geom_boxplot() +
facet_grid(prosody ~ complementizer)
p1 <- dat_t %>%
ggplot(aes(x = verbtype, y = veridicality, col = prosody)) +
geom_boxplot()
p1
dat_s3 <- dat_t %>%
group_by(verbtype, prosody, complementizer) %>%
summarise(meanVer = mean(veridicality))
dat_s3
dat_s3
dat_s3 %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
facet_grid(complementizer ~ verbtype)
dat_s <- dat_t %>%
group_by(verbtype, complementizer, prosody) %>%
summarise(meanVer = mean(veridicality),
n = n(),
# Standard deviations
sdVer = sd(veridicality),
# Standard errors
seVer = sdVer/sqrt(n))
dat_s
View(dat_s)
dat_s <- dat_t %>%
group_by(verbtype, complementizer, prosody) %>%
summarise(meanNat = mean(naturalness),
meanVer = mean(veridicality),
n = n(),
# Standard deviations
sdNat = sd(naturalness),
sdVer = sd(veridicality),
# Standard errors
seNat = sdNat/sqrt(n),
seVer = sdVer/sqrt(n))
dat_s
View(dat_s)
dat_t$complementizer2 <- dat_t$complementizer
dat_t$complementizer2 <- as.character(dat_t$complementizer2)
dat_t$complementizer2[dat_t$complementizer2 == "jul1"] <- "jul"
dat_t$complementizer2[dat_t$complementizer2 == "jul2"] <- "jul"
dat_t$complementizer2 <- as.factor(dat_t$complementizer2)
# Order complementizers in intuitive pairs
dat_t$complementizer2 <- factor(dat_t$complementizer2, levels= c("jul","go"))
dat_s <- dat_t %>%
group_by(verbtype, complementizer2, prosody) %>%
summarise(meanNat = mean(naturalness),
meanVer = mean(veridicality),
n = n(),
sdNat = sd(naturalness),
sdVer = sd(veridicality),
seNat = sdNat/sqrt(n),
seVer = sdVer/sqrt(n))
dat_s
dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype)
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
ggthemes::theme_few() +
scale_fill_manual(values = wes_palette("GrandBudapest2"))
p
p <- dat_s %>%
ggplot(aes(x = prosody, y = meanVer, fill = prosody)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=meanVer-seVer, ymax=meanVer+seVer),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
facet_grid(complementizer2 ~ verbtype) +
theme_bw() +
theme(axis.title.y=element_text(size=14),
axis.title.x=element_blank()) + labs(y='Mean Veridicality Ratings') +
scale_fill_manual(values = c("#D55E00", "#009E73", "#56B4E9")) +
theme(legend.position="none") +
theme(strip.text.x = element_text(size = 10), strip.text.y = element_text(size = 10)) +
geom_hline(yintercept=true_base, linetype="dashed",
color = "#F0E442", size=1.2) +
geom_hline(yintercept=false_base, linetype="dashed",
color = "#999999", size=1.2)
p
